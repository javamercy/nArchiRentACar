// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UK_Brands_Name")
                        .IsUnique();

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa9c7d42-b6cf-43d5-9651-e8c2266e30fa"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8050),
                            Name = "Audi"
                        },
                        new
                        {
                            Id = new Guid("a358155a-234c-4525-b33c-de1ea21c1469"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8060),
                            Name = "BMW"
                        },
                        new
                        {
                            Id = new Guid("1caa83b0-b32c-4e94-8e12-03b19fe584bf"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8060),
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = new Guid("c5450178-921a-46c6-b236-b0e4787604e6"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8060),
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = new Guid("c62c12fe-5b4b-436f-b2cc-3a8ce337c054"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8060),
                            Name = "Ford"
                        },
                        new
                        {
                            Id = new Guid("5929393a-5518-4097-95f7-2b36c3852ba9"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8080),
                            Name = "Opel"
                        },
                        new
                        {
                            Id = new Guid("32495789-b924-4c2b-8d1f-5a5a7d9b8873"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8080),
                            Name = "Renault"
                        },
                        new
                        {
                            Id = new Guid("20dd0a38-b7fb-4dc1-aa1e-957854a10ad5"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8090),
                            Name = "Peugeot"
                        },
                        new
                        {
                            Id = new Guid("96c517b6-dfac-4eb6-b29e-5c9c7b875bb2"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8090),
                            Name = "Fiat"
                        },
                        new
                        {
                            Id = new Guid("47f065d2-d009-40fa-a096-bde4b754aee2"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8090),
                            Name = "Skoda"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("CarState")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Kilometer")
                        .HasColumnType("int")
                        .HasColumnName("Kilometer");

                    b.Property<int>("MinFindexScore")
                        .HasColumnType("int");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ModelId");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Plate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Fuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UK_Fuels_Name")
                        .IsUnique();

                    b.ToTable("Fuels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f39e21d-2df4-4b5b-abc1-c4d1d3c37588"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(7940),
                            Name = "Gasoline"
                        },
                        new
                        {
                            Id = new Guid("7e57d004-2b97-0e7a-b45f-5387362902d2"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(7940),
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = new Guid("5fa1c428-304a-4016-9ab2-99560626e1ce"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(7940),
                            Name = "LPG"
                        },
                        new
                        {
                            Id = new Guid("4e6e6f6b-2d6f-4e6e-6f6b-2d6f4e6e6f6b"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(7940),
                            Name = "Electric"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BrandId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("FuelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FuelId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<Guid>("TransmissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransmissionId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("FuelId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex(new[] { "Name" }, "UK_Models_Name")
                        .IsUnique();

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("655ee34e-d40c-488a-a730-cdbc9e7938e3"),
                            BrandId = new Guid("fa9c7d42-b6cf-43d5-9651-e8c2266e30fa"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8110),
                            DailyPrice = 1500m,
                            FuelId = new Guid("7e57d004-2b97-0e7a-b45f-5387362902d2"),
                            ImageUrl = "images/audi-a3.jpg",
                            Name = "A3",
                            TransmissionId = new Guid("2ae251cf-354e-4c6a-b808-9fb7805b71d3")
                        },
                        new
                        {
                            Id = new Guid("622de90a-9b2f-416f-b355-a2db8700b6a6"),
                            BrandId = new Guid("a358155a-234c-4525-b33c-de1ea21c1469"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8110),
                            DailyPrice = 1450m,
                            FuelId = new Guid("7e57d004-2b97-0e7a-b45f-5387362902d2"),
                            ImageUrl = "images/bmw-3-series.jpg",
                            Name = "3 Series",
                            TransmissionId = new Guid("2ae251cf-354e-4c6a-b808-9fb7805b71d3")
                        },
                        new
                        {
                            Id = new Guid("8aa08cdc-6cb5-4279-a521-7201f7ee8f45"),
                            BrandId = new Guid("1caa83b0-b32c-4e94-8e12-03b19fe584bf"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8110),
                            DailyPrice = 1600m,
                            FuelId = new Guid("5fa1c428-304a-4016-9ab2-99560626e1ce"),
                            ImageUrl = "images/mercedes-c-class.jpg",
                            Name = "C Class",
                            TransmissionId = new Guid("9799d776-2a92-4771-a73d-19a381f73cef")
                        },
                        new
                        {
                            Id = new Guid("a6b40c9a-2b3d-4dbf-993b-483fb7a855f3"),
                            BrandId = new Guid("c5450178-921a-46c6-b236-b0e4787604e6"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8120),
                            DailyPrice = 1200m,
                            FuelId = new Guid("9f39e21d-2df4-4b5b-abc1-c4d1d3c37588"),
                            ImageUrl = "images/volkswagen-golf.jpg",
                            Name = "Golf",
                            TransmissionId = new Guid("9799d776-2a92-4771-a73d-19a381f73cef")
                        },
                        new
                        {
                            Id = new Guid("47664e1a-3811-4d49-a4e2-85f5db020882"),
                            BrandId = new Guid("c62c12fe-5b4b-436f-b2cc-3a8ce337c054"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8120),
                            DailyPrice = 1100m,
                            FuelId = new Guid("9f39e21d-2df4-4b5b-abc1-c4d1d3c37588"),
                            ImageUrl = "images/ford-focus.jpg",
                            Name = "Focus",
                            TransmissionId = new Guid("9799d776-2a92-4771-a73d-19a381f73cef")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UK_Transmissions_Name")
                        .IsUnique();

                    b.ToTable("Transmissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae251cf-354e-4c6a-b808-9fb7805b71d3"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8040),
                            Name = "Manual"
                        },
                        new
                        {
                            Id = new Guid("9799d776-2a92-4771-a73d-19a381f73cef"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8040),
                            Name = "Automatic"
                        },
                        new
                        {
                            Id = new Guid("bd2bb9e7-9f5a-442a-a24d-97bc98f4205f"),
                            CreatedDate = new DateTime(2023, 12, 7, 12, 24, 37, 951, DateTimeKind.Utc).AddTicks(8040),
                            Name = "Semi-Automatic"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.HasOne("Domain.Entities.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Fuel", "Fuel")
                        .WithMany("Models")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transmission", "Transmission")
                        .WithMany("Models")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Fuel");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Fuel", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
